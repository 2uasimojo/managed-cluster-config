---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pki-operator-annotator
  namespace: openshift-pki-operator-annotator
data:
  should_patch.py: |
    import sys

    # should_patch.py takes two arguments: version and compare_version.
    # It will then compare the Z stream of version to see if it's >= compare_version,
    # exiting non-zero if it's not. Exiting non-zero means we need to patch.
    #
    # Example:
    #   # This exits non-zero as the Z stream (10) is not >= 11
    #   python should_patch.py 4.17.10 11
    #
    #   # This exits zero as the Z stream (10) is >= 9
    #   python should_patch.py 4.17.10 9
    
    usage = """usage: python should_patch.py $version $compare_version
    example: python should_patch.py 4.17.15 14 # exits 0 
      """
    
    def should_patch(version, compare_version):
        try:
            x, y, z = version.split('.')
            if int(z) >= int(compare_version):
                print(f"don't patch: version {version} is >= x.y.{compare_version}")
                return False
            else:
                print(f"should patch: version {version} is not >= x.y.{compare_version}")
                return True
        except ValueError:
            print(f"could not compare version {version} to {compare_version}, defaulting to should patch")
            return True
    
    def main():
        if len(sys.argv) != 3:
            print(usage)
            sys.exit(1)
        
        version = sys.argv[1].rstrip()
        compare_version = sys.argv[2].rstrip()
        
        if should_patch(version, compare_version):
            sys.exit(1)
    
    if __name__=="__main__":
        main()

  patch.sh: |
    #!/bin/bash
    
    # Required Environment Variables:
    # - IMAGE
    # - MAJOR_MINOR_VER
    # - Z_STREAM_FIXED_VER
    
    # Get all manifestwork objects and extract their names
    managedclusters=$(oc get managedclusters -l openshiftVersion-major-minor=${MAJOR_MINOR_VER} -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')
    
    # Loop through each manifestwork object
    for clusterID in ${managedclusters[@]};do
      # Clean up annotation due to upgrade bug in OCPBUGS-52819
      # Removing annotation for all versions as kube apiserver arguments prevent control plane operator image from comming up
      # after upgrade has started, this causes pods to crashloop see incident #itn-2025-00060 
    
      namespace=$(oc get managedclusters "$clusterID" -o json | jq -r '.metadata.labels["api.openshift.com/management-cluster"]')
      # On a service clusters api.openshift.com/management-cluster will be null for management clusters and local-cluster
      # skip these
      if [[ $namespace == "null" ]]; then
        continue
      fi

      kinds=$(oc get manifestwork -n "$namespace" "$clusterID" -o json | jq -r '.spec.workload.manifests[].kind')
      num=0
      for kind in $kinds;do
        if [[ $kind == "HostedCluster" ]]; then
            echo "removing annotation for cluster: $clusterID"

            json_payload='[{"op":"remove","path":"/spec/workload/manifests/'"$num"'/metadata/annotations/hypershift.openshift.io~1control-plane-operator-image"}]'
    
            echo "oc patch manifestwork $clusterID -n $namespace --type='json' -p "$json_payload""
            oc patch manifestwork "$clusterID" -n "$namespace" --type='json' -p "$json_payload"
            echo "-------------------------------------------------------------------------"
            break
        fi
      (( num++))
      done
    done